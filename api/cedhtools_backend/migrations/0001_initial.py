# Generated by Django 4.2.17 on 2025-01-10 23:54

import cedhtools_backend.models.topdeck_models
import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CardPrintings',
            fields=[
                ('unique_card_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('most_common_printing', models.UUIDField()),
                ('usage_count', models.IntegerField()),
            ],
            options={
                'db_table': 'card_printings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CardStatisticsByCommander',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('commander_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('unique_card_id', models.CharField(max_length=255)),
                ('deck_count', models.IntegerField()),
                ('avg_win_rate', models.FloatField()),
                ('win_rate_stddev', models.FloatField()),
                ('avg_draw_rate', models.FloatField()),
                ('avg_loss_rate', models.FloatField()),
                ('total_wins', models.IntegerField()),
                ('total_draws', models.IntegerField()),
                ('total_losses', models.IntegerField()),
                ('most_common_printing', models.UUIDField()),
            ],
            options={
                'db_table': 'card_statistics_by_commander',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CardStatisticsByCommanderFiltered',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commander_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('unique_card_id', models.CharField(max_length=255)),
                ('period_name', models.CharField(max_length=50)),
                ('min_players', models.IntegerField()),
                ('deck_count', models.IntegerField()),
                ('total_wins', models.IntegerField()),
                ('total_draws', models.IntegerField()),
                ('total_losses', models.IntegerField()),
                ('win_rate_stddev', models.FloatField()),
                ('avg_win_rate', models.FloatField()),
                ('avg_draw_rate', models.FloatField()),
                ('avg_loss_rate', models.FloatField()),
                ('most_common_printing', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'card_statistics_by_commander_filtered',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CEDHToolsMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_decks', models.IntegerField()),
                ('total_tournaments', models.IntegerField()),
                ('total_unique_cards', models.IntegerField()),
            ],
            options={
                'db_table': 'cedhtools_metrics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommanderDeckRelationships',
            fields=[
                ('deck_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('commander_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
            ],
            options={
                'db_table': 'commander_deck_relationships',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommanderMetaStatistics',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('commander_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('total_decks', models.IntegerField()),
                ('avg_win_rate', models.FloatField()),
                ('avg_draw_rate', models.FloatField()),
                ('avg_loss_rate', models.FloatField()),
                ('win_rate_stddev', models.FloatField()),
            ],
            options={
                'db_table': 'commander_meta_statistics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommanderMetaStatisticsFiltered',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commander_list', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('period_name', models.CharField(max_length=50)),
                ('min_tournament_size', models.IntegerField()),
                ('total_decks', models.IntegerField()),
                ('avg_win_rate', models.FloatField()),
                ('avg_draw_rate', models.FloatField()),
                ('avg_loss_rate', models.FloatField()),
                ('win_rate_stddev', models.FloatField()),
                ('total_wins', models.IntegerField()),
                ('total_draws', models.IntegerField()),
                ('total_losses', models.IntegerField()),
            ],
            options={
                'db_table': 'commander_meta_statistics_filtered',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MoxfieldCard',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('unique_card_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'moxfield_card',
            },
        ),
        migrations.CreateModel(
            name='MoxfieldDeck',
            fields=[
                ('id', models.CharField(primary_key=True, serialize=False)),
                ('public_id', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=1023)),
                ('colors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=list, size=None)),
                ('color_identity', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=list, size=None)),
            ],
            options={
                'db_table': 'moxfield_deck',
            },
        ),
        migrations.CreateModel(
            name='MoxfieldDeckCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('board', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'moxfield_deck_card',
            },
        ),
        migrations.CreateModel(
            name='ScryfallCard',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('scryfall_uri', models.URLField(max_length=500)),
                ('layout', models.CharField(max_length=50)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('type_line', models.CharField(blank=True, max_length=255, null=True)),
                ('mana_cost', models.CharField(blank=True, max_length=50, null=True)),
                ('cmc', models.FloatField()),
                ('legality', models.CharField(max_length=50)),
                ('image_uris', models.JSONField(blank=True, max_length=500, null=True)),
                ('released_at', models.DateField(db_index=True, null=True)),
                ('collector_number', models.CharField(blank=True, max_length=50, null=True)),
                ('colors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=list, size=None)),
                ('color_identity', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=list, size=None)),
            ],
            options={
                'db_table': 'scryfall_card',
            },
        ),
        migrations.CreateModel(
            name='TopdeckMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round', models.CharField(max_length=255)),
                ('table_number', models.IntegerField()),
                ('status', models.CharField(max_length=255)),
                ('winner_topdeck_id', models.CharField(blank=True, max_length=255, null=True)),
                ('is_draw', models.BooleanField(default=False)),
                ('is_top_cut', models.BooleanField(default=False)),
                ('pod_size', models.IntegerField(validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(4)])),
            ],
            options={
                'db_table': 'topdeck_match',
            },
            bases=(models.Model, cedhtools_backend.models.topdeck_models.QuerySetMixin),
        ),
        migrations.CreateModel(
            name='TopdeckMatchPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_topdeck_id', models.CharField(blank=True, max_length=255, null=True)),
                ('seat_position', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)])),
            ],
            options={
                'db_table': 'topdeck_match_player',
            },
            bases=(models.Model, cedhtools_backend.models.topdeck_models.QuerySetMixin),
        ),
        migrations.CreateModel(
            name='TopdeckPlayer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('topdeck_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('name', models.CharField(max_length=2047)),
                ('first_seen_date', models.BigIntegerField(null=True)),
                ('last_seen_date', models.BigIntegerField(null=True)),
            ],
            options={
                'db_table': 'topdeck_player',
            },
            bases=(models.Model, cedhtools_backend.models.topdeck_models.QuerySetMixin),
        ),
        migrations.CreateModel(
            name='TopdeckTournament',
            fields=[
                ('tid', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=2047, null=True)),
                ('swiss_num', models.IntegerField()),
                ('start_date', models.BigIntegerField()),
                ('top_cut', models.IntegerField()),
                ('tournament_size', models.IntegerField(validators=[django.core.validators.MinValueValidator(3)])),
                ('average_elo', models.IntegerField(blank=True, null=True)),
                ('mode_elo', models.IntegerField(blank=True, null=True)),
                ('median_elo', models.IntegerField(blank=True, null=True)),
                ('top_elo', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'topdeck_tournament',
                'indexes': [models.Index(fields=['tid'], name='topdeck_tou_tid_a5ba7b_idx'), models.Index(fields=['start_date'], name='topdeck_tou_start_d_77b46e_idx'), models.Index(fields=['tournament_size'], name='topdeck_tou_tournam_bbe4ac_idx'), models.Index(fields=['tournament_size', 'start_date'], name='topdeck_tou_tournam_0ef0a5_idx')],
            },
            bases=(models.Model, cedhtools_backend.models.topdeck_models.QuerySetMixin),
        ),
        migrations.CreateModel(
            name='TopdeckPlayerStanding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_topdeck_id', models.CharField(blank=True, max_length=255, null=True)),
                ('decklist', models.URLField(blank=True, max_length=1023, null=True)),
                ('standing_position', models.IntegerField()),
                ('wins', models.IntegerField(default=0)),
                ('wins_swiss', models.IntegerField(default=0)),
                ('wins_bracket', models.IntegerField(default=0)),
                ('byes', models.IntegerField(default=0)),
                ('draws', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('losses_swiss', models.IntegerField(default=0)),
                ('losses_bracket', models.IntegerField(default=0)),
                ('total_matches', models.IntegerField(default=0)),
                ('computed_win_rate', models.FloatField(default=0.0)),
                ('computed_loss_rate', models.FloatField(default=0.0)),
                ('computed_draw_rate', models.FloatField(default=0.0)),
                ('deck', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='standings', to='cedhtools_backend.moxfielddeck')),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='standings', to='cedhtools_backend.topdeckplayer')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standings', to='cedhtools_backend.topdecktournament')),
            ],
            options={
                'db_table': 'topdeck_player_standing',
                'ordering': ['standing_position'],
            },
            bases=(models.Model, cedhtools_backend.models.topdeck_models.QuerySetMixin),
        ),
        migrations.AddIndex(
            model_name='topdeckplayer',
            index=models.Index(fields=['name'], name='topdeck_pla_name_a8192e_idx'),
        ),
        migrations.AddIndex(
            model_name='topdeckplayer',
            index=models.Index(fields=['last_seen_date', 'topdeck_id'], name='topdeck_pla_last_se_6aac20_idx'),
        ),
        migrations.AddField(
            model_name='topdeckmatchplayer',
            name='match',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='cedhtools_backend.topdeckmatch'),
        ),
        migrations.AddField(
            model_name='topdeckmatchplayer',
            name='player',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches', to='cedhtools_backend.topdeckplayer'),
        ),
        migrations.AddField(
            model_name='topdeckmatch',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='cedhtools_backend.topdecktournament'),
        ),
        migrations.AddField(
            model_name='topdeckmatch',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_won', to='cedhtools_backend.topdeckplayer'),
        ),
        migrations.AddIndex(
            model_name='scryfallcard',
            index=models.Index(fields=['name'], name='scryfall_ca_name_7d8601_idx'),
        ),
        migrations.AddIndex(
            model_name='scryfallcard',
            index=models.Index(fields=['released_at', 'collector_number'], name='scryfall_ca_release_1dc48f_idx'),
        ),
        migrations.AddIndex(
            model_name='scryfallcard',
            index=models.Index(fields=['type'], name='scryfall_ca_type_4883eb_idx'),
        ),
        migrations.AddIndex(
            model_name='scryfallcard',
            index=django.contrib.postgres.indexes.GinIndex(fields=['colors'], name='scryfall_ca_colors_a4728f_gin'),
        ),
        migrations.AddIndex(
            model_name='scryfallcard',
            index=django.contrib.postgres.indexes.GinIndex(fields=['color_identity'], name='scryfall_ca_color_i_a00ee9_gin'),
        ),
        migrations.AddField(
            model_name='moxfielddeckcard',
            name='card',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cedhtools_backend.moxfieldcard'),
        ),
        migrations.AddField(
            model_name='moxfielddeckcard',
            name='deck',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cedhtools_backend.moxfielddeck'),
        ),
        migrations.AddIndex(
            model_name='moxfielddeck',
            index=models.Index(fields=['public_id'], name='moxfield_de_public__8460e5_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfielddeck',
            index=django.contrib.postgres.indexes.GinIndex(fields=['color_identity'], name='moxfield_de_color_i_a71e28_gin'),
        ),
        migrations.AddIndex(
            model_name='moxfielddeck',
            index=django.contrib.postgres.indexes.GinIndex(fields=['colors'], name='moxfield_de_colors_6a5a28_gin'),
        ),
        migrations.AddField(
            model_name='moxfieldcard',
            name='decks',
            field=models.ManyToManyField(related_name='cards', through='cedhtools_backend.MoxfieldDeckCard', to='cedhtools_backend.moxfielddeck'),
        ),
        migrations.AddField(
            model_name='moxfieldcard',
            name='scryfall_card',
            field=models.ForeignKey(db_column='scryfall_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moxfield_cards', to='cedhtools_backend.scryfallcard'),
        ),
        migrations.AddIndex(
            model_name='topdeckplayerstanding',
            index=models.Index(fields=['tournament', 'player'], name='topdeck_pla_tournam_3a0149_idx'),
        ),
        migrations.AddIndex(
            model_name='topdeckplayerstanding',
            index=models.Index(fields=['tournament', 'standing_position'], name='topdeck_pla_tournam_0030c5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topdeckplayerstanding',
            unique_together={('tournament', 'standing_position'), ('tournament', 'player')},
        ),
        migrations.AddIndex(
            model_name='topdeckmatchplayer',
            index=models.Index(fields=['match', 'player'], name='topdeck_mat_match_i_e42073_idx'),
        ),
        migrations.AddIndex(
            model_name='topdeckmatchplayer',
            index=models.Index(fields=['player'], name='topdeck_mat_player__e5421a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topdeckmatchplayer',
            unique_together={('match', 'player'), ('match', 'seat_position')},
        ),
        migrations.AddIndex(
            model_name='topdeckmatch',
            index=models.Index(fields=['tournament', 'round', 'table_number'], name='topdeck_mat_tournam_e0b93d_idx'),
        ),
        migrations.AddIndex(
            model_name='topdeckmatch',
            index=models.Index(fields=['tournament', 'winner'], name='topdeck_mat_tournam_dce02a_idx'),
        ),
        migrations.AddIndex(
            model_name='topdeckmatch',
            index=models.Index(fields=['tournament', 'is_top_cut'], name='topdeck_mat_tournam_d450ce_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='topdeckmatch',
            unique_together={('tournament', 'round', 'table_number')},
        ),
        migrations.AddIndex(
            model_name='moxfielddeckcard',
            index=models.Index(fields=['deck', 'card'], name='moxfield_de_deck_id_bdaa07_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfielddeckcard',
            index=models.Index(fields=['board'], name='moxfield_de_board_224499_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldcard',
            index=models.Index(fields=['unique_card_id'], name='moxfield_ca_unique__bc68ff_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldcard',
            index=models.Index(fields=['id'], name='moxfield_ca_id_d30ae0_idx'),
        ),
    ]
