# Generated by Django 4.2.17 on 2024-12-31 02:18

import cedhtools_backend.validators.moxfield_url_validator
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MoxfieldBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(choices=[('mainboard', 'mainboard'), ('commanders', 'commanders'), ('companions', 'companions')], max_length=255)),
            ],
            options={
                'db_table': 'moxfield_board',
            },
        ),
        migrations.CreateModel(
            name='MoxfieldBoardCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'moxfield_board_card',
            },
        ),
        migrations.CreateModel(
            name='MoxfieldCard',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('unique_card_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'moxfield_card',
            },
        ),
        migrations.CreateModel(
            name='MoxfieldDeck',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True)),
                ('format', models.CharField(max_length=100)),
                ('public_url', models.URLField(max_length=500)),
                ('public_id', models.CharField(max_length=255)),
                ('colors', models.JSONField(blank=True, default=list)),
                ('color_percentages', models.JSONField(blank=True, default=dict)),
                ('color_identity', models.JSONField(blank=True, default=list)),
                ('color_identity_percentages', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'db_table': 'moxfield_deck',
            },
        ),
        migrations.CreateModel(
            name='ScryfallCard',
            fields=[
                ('id', models.UUIDField(editable=False, help_text='A unique ID for this card in Scryfall’s database.', primary_key=True, serialize=False)),
                ('layout', models.CharField(choices=[('normal', 'Normal'), ('split', 'Split'), ('flip', 'Flip'), ('transform', 'Transform'), ('modal_dfc', 'Modal Double-Faced Card'), ('meld', 'Meld'), ('leveler', 'Leveler'), ('class', 'Class'), ('case', 'Case'), ('saga', 'Saga'), ('adventure', 'Adventure'), ('mutate', 'Mutate'), ('planar', 'Planar'), ('scheme', 'Scheme'), ('vanguard', 'Vanguard'), ('token', 'Token'), ('double_faced_token', 'Double-Faced Token'), ('emblem', 'Emblem'), ('augment', 'Augment'), ('host', 'Host'), ('art_series', 'Art Series'), ('reversible_card', 'Reversible Card')], help_text='A code for this card’s layout.', max_length=25)),
                ('cmc', models.FloatField(help_text='The card’s mana value. Note that some funny cards have fractional mana costs.')),
                ('color_identity', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(), help_text='This card’s color identity.', size=None)),
                ('color_indicator', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), blank=True, help_text='The colors in this card’s color indicator, if any. A null value for this field indicates the card does not have one.', null=True, size=None)),
                ('colors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), blank=True, help_text='This card’s colors, if the overall card has colors defined by the rules. Otherwise the colors will be on the card_faces objects, see below.', null=True, size=None)),
                ('defense', models.CharField(blank=True, help_text='This face’s defense, if any.', max_length=25, null=True)),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), help_text="An array of keywords that this card uses, such as 'Flying' and 'Cumulative upkeep'.", size=None)),
                ('legalities', models.JSONField(help_text='An object describing the legality of this card across play formats. Possible legalities are legal, not_legal, restricted, and banned.')),
                ('loyalty', models.CharField(blank=True, help_text='This loyalty if any. Note that some cards have loyalties that are not numeric, such as X.', null=True)),
                ('mana_cost', models.CharField(blank=True, help_text='The mana cost for this card. This value will be any empty string "" if the cost is absent. Remember that per the game rules, a missing mana cost and a mana cost of {0} are different values. Multi-faced cards will report this value in card faces.', null=True)),
                ('name', models.CharField(help_text='The name of this card. If this card has multiple faces, this field will contain both names separated by //.')),
                ('oracle_text', models.TextField(blank=True, help_text='The Oracle text for this card, if any.', null=True)),
                ('power', models.CharField(blank=True, help_text='This card’s power, if any. Note that some cards have powers that are not numeric, such as *.', max_length=25, null=True)),
                ('toughness', models.CharField(blank=True, help_text='This card’s toughness, if any. Note that some cards have toughnesses that are not numeric, such as *.', max_length=25, null=True)),
                ('type_line', models.CharField(help_text='The type line of this card.')),
                ('card_back_id', models.UUIDField(help_text='The Scryfall ID for the card back design present on this card.')),
                ('collector_number', models.CharField(help_text='This card’s collector number. Note that collector numbers can contain non-numeric characters, such as letters or ★.', max_length=10)),
                ('highres_image', models.BooleanField(help_text='True if this card’s imagery is high resolution.')),
                ('illustration_id', models.UUIDField(blank=True, help_text='A unique identifier for the card artwork that remains consistent across reprints. Newly spoiled cards may not have this field yet.', null=True)),
                ('image_status', models.CharField(choices=[('missing', 'Missing'), ('placeholder', 'Placeholder'), ('lowres', 'Low Resolution'), ('highres_scan', 'High Resolution Scan')], help_text='A computer-readable indicator for the state of this card’s image, one of missing, placeholder, lowres, or highres_scan.', max_length=25)),
                ('image_uris', models.JSONField(blank=True, help_text='An object listing available imagery for this card. See the Card Imagery article for more information.', null=True)),
                ('released_at', models.DateField(help_text='The date this card was first released.')),
                ('reprint', models.BooleanField(help_text='True if this card is a reprint.')),
                ('variation', models.BooleanField(help_text='Whether this card is a variation of another printing.')),
                ('variation_of', models.UUIDField(blank=True, help_text='The printing ID of the printing this card is a variation of.', null=True)),
            ],
            options={
                'db_table': 'scryfall_card',
            },
        ),
        migrations.CreateModel(
            name='TopdeckTournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tid', models.CharField(max_length=255, unique=True)),
                ('tournament_name', models.CharField(max_length=511)),
                ('swiss_num', models.IntegerField()),
                ('start_date', models.BigIntegerField()),
                ('game', models.CharField(max_length=100)),
                ('format', models.CharField(max_length=100)),
                ('top_cut', models.IntegerField()),
            ],
            options={
                'db_table': 'topdeck_tournament',
                'indexes': [models.Index(fields=['tid'], name='topdeck_tou_tid_a5ba7b_idx'), models.Index(fields=['start_date'], name='topdeck_tou_start_d_77b46e_idx'), models.Index(fields=['game'], name='topdeck_tou_game_40159b_idx'), models.Index(fields=['format'], name='topdeck_tou_format_7da1f8_idx'), models.Index(fields=['top_cut'], name='topdeck_tou_top_cut_02ea6a_idx')],
            },
        ),
        migrations.CreateModel(
            name='TopdeckPlayerStanding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=511)),
                ('decklist', models.URLField(blank=True, max_length=255, null=True, validators=[cedhtools_backend.validators.moxfield_url_validator.validate_moxfield_url])),
                ('wins', models.IntegerField(default=0)),
                ('wins_swiss', models.IntegerField(default=0)),
                ('wins_bracket', models.IntegerField(default=0)),
                ('win_rate', models.FloatField(blank=True, null=True)),
                ('win_rate_swiss', models.FloatField(blank=True, null=True)),
                ('win_rate_bracket', models.FloatField(blank=True, null=True)),
                ('draws', models.IntegerField(default=0)),
                ('losses', models.IntegerField(default=0)),
                ('losses_swiss', models.IntegerField(default=0)),
                ('losses_bracket', models.IntegerField(default=0)),
                ('player_id', models.CharField(blank=True, max_length=255, null=True)),
                ('deck', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='player_standings', to='cedhtools_backend.moxfielddeck')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standings', to='cedhtools_backend.topdecktournament')),
            ],
            options={
                'db_table': 'topdeck_player_standing',
            },
        ),
        migrations.CreateModel(
            name='ScryfallCardFace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cmc', models.FloatField(help_text='The mana value of this particular face, if the card is reversible.')),
                ('color_indicator', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), blank=True, help_text='The colors in this face’s color indicator, if any.', null=True, size=None)),
                ('colors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=25), blank=True, help_text='This face’s colors, if the game defines colors for the individual face of this card.', null=True, size=None)),
                ('defense', models.CharField(blank=True, help_text='This face’s defense, if the game defines colors for the individual face of this card.', max_length=25, null=True)),
                ('flavor_text', models.TextField(blank=True, help_text='The flavor text printed on this face, if any.', null=True)),
                ('illustration_id', models.UUIDField(blank=True, help_text='A unique identifier for the card face artwork that remains consistent across reprints. Newly spoiled cards may not have this field yet.', null=True)),
                ('image_uris', models.JSONField(blank=True, help_text='An object providing URIs to imagery for this face, if this is a double-sided card. If this card is not double-sided, then the image_uris property will be part of the parent object instead.', null=True)),
                ('layout', models.CharField(blank=True, choices=[('normal', 'Normal'), ('split', 'Split'), ('flip', 'Flip'), ('transform', 'Transform'), ('modal_dfc', 'Modal Double-Faced Card'), ('meld', 'Meld'), ('leveler', 'Leveler'), ('class', 'Class'), ('case', 'Case'), ('saga', 'Saga'), ('adventure', 'Adventure'), ('mutate', 'Mutate'), ('planar', 'Planar'), ('scheme', 'Scheme'), ('vanguard', 'Vanguard'), ('token', 'Token'), ('double_faced_token', 'Double-Faced Token'), ('emblem', 'Emblem'), ('augment', 'Augment'), ('host', 'Host'), ('art_series', 'Art Series'), ('reversible_card', 'Reversible Card')], help_text='The layout of this card face, if the card is reversible.', max_length=25, null=True)),
                ('loyalty', models.CharField(help_text='This face’s loyalty, if any.', max_length=25, null=True)),
                ('mana_cost', models.CharField(help_text='The mana cost for this face. This value will be any empty string "" if the cost is absent. Remember that per the game rules, a missing mana cost and a mana cost of {0} are different values.')),
                ('name', models.CharField(help_text='The name of this particular face.')),
                ('oracle_text', models.CharField(blank=True, help_text='The Oracle text for this face, if any.', max_length=2000, null=True)),
                ('power', models.CharField(blank=True, help_text='This face’s power, if any. Note that some cards have powers that are not numeric, such as *.', max_length=25, null=True)),
                ('toughness', models.CharField(blank=True, help_text='This face’s toughness, if any.', null=True)),
                ('type_line', models.CharField(blank=True, help_text='The type line of this particular face, if the card is reversible.', null=True)),
                ('parent_card', models.ForeignKey(help_text='The card object this face appears on.', on_delete=django.db.models.deletion.CASCADE, related_name='card_faces', to='cedhtools_backend.scryfallcard')),
            ],
            options={
                'db_table': 'scryfall_card_face',
            },
        ),
        migrations.AddIndex(
            model_name='scryfallcard',
            index=models.Index(fields=['id'], name='scryfall_ca_id_f351a9_idx'),
        ),
        migrations.AddField(
            model_name='moxfielddeck',
            name='main_card',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='main_decks', to='cedhtools_backend.moxfieldcard'),
        ),
        migrations.AddField(
            model_name='moxfieldcard',
            name='scryfall_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moxfield_cards', to='cedhtools_backend.scryfallcard'),
        ),
        migrations.AddField(
            model_name='moxfieldboardcard',
            name='board',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_cards', to='cedhtools_backend.moxfieldboard'),
        ),
        migrations.AddField(
            model_name='moxfieldboardcard',
            name='card',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_cards', to='cedhtools_backend.moxfieldcard'),
        ),
        migrations.AddField(
            model_name='moxfieldboard',
            name='deck',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boards', to='cedhtools_backend.moxfielddeck'),
        ),
        migrations.AddIndex(
            model_name='topdeckplayerstanding',
            index=models.Index(fields=['deck'], name='topdeck_pla_deck_id_783303_idx'),
        ),
        migrations.AddIndex(
            model_name='topdeckplayerstanding',
            index=models.Index(fields=['decklist'], name='topdeck_pla_decklis_6efe1b_idx'),
        ),
        migrations.AddIndex(
            model_name='topdeckplayerstanding',
            index=models.Index(fields=['tournament'], name='topdeck_pla_tournam_b6864b_idx'),
        ),
        migrations.AddIndex(
            model_name='topdeckplayerstanding',
            index=models.Index(fields=['player_id'], name='topdeck_pla_player__39080d_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfielddeck',
            index=models.Index(fields=['id'], name='moxfield_de_id_d18690_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfielddeck',
            index=models.Index(fields=['public_id'], name='moxfield_de_public__8460e5_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldcard',
            index=models.Index(fields=['unique_card_id'], name='moxfield_ca_unique__bc68ff_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldcard',
            index=models.Index(fields=['scryfall_id'], name='moxfield_ca_scryfal_fefdcf_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldcard',
            index=models.Index(fields=['id'], name='moxfield_ca_id_d30ae0_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldboardcard',
            index=models.Index(fields=['board'], name='moxfield_bo_board_i_5def02_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldboardcard',
            index=models.Index(fields=['card'], name='moxfield_bo_card_id_a47a38_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldboard',
            index=models.Index(fields=['deck'], name='moxfield_bo_deck_id_470644_idx'),
        ),
        migrations.AddIndex(
            model_name='moxfieldboard',
            index=models.Index(fields=['key'], name='moxfield_bo_key_fb19e2_idx'),
        ),
    ]
